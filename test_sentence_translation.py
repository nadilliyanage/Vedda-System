import requests
import json

def test_sentence_translation():
    """Test sentence translation between English, Sinhala, and Vedda"""
    print("üìù SENTENCE TRANSLATION TESTING")
    print("=" * 60)
    
    translator_url = "http://localhost:5001/api/translate"
    
    # Test sentences as provided by the user
    test_cases = [
        {
            "name": "English to Vedda",
            "text": "These children are playing football.",
            "source_language": "english",
            "target_language": "vedda",
            "expected": "‡∂∏‡∑ö ‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.",
            "description": "Should translate 'these' to '‡∂∏‡∑ö' and 'children' to '‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù'"
        },
        {
            "name": "English to Sinhala", 
            "text": "These children are playing football.",
            "source_language": "english",
            "target_language": "sinhala",
            "expected": "‡∂∏‡∑ö ‡∑Ö‡∂∏‡∂∫‡∑í ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.",
            "description": "Should use Google Translate for full sentence"
        },
        {
            "name": "Sinhala to Vedda",
            "text": "‡∂∏‡∑ö ‡∑Ö‡∂∏‡∂∫‡∑í ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.",
            "source_language": "sinhala", 
            "target_language": "vedda",
            "expected": "‡∂∏‡∑ö ‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.",
            "description": "Should replace '‡∑Ö‡∂∏‡∂∫‡∑í' with '‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù' from dictionary"
        },
        {
            "name": "Vedda to English",
            "text": "‡∂∏‡∑ö ‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.",
            "source_language": "vedda",
            "target_language": "english", 
            "expected": "These children are playing football.",
            "description": "Should use Sinhala bridge for unknown words"
        },
        {
            "name": "Vedda to Sinhala",
            "text": "‡∂∏‡∑ö ‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.",
            "source_language": "vedda",
            "target_language": "sinhala",
            "expected": "‡∂∏‡∑ö ‡∑Ö‡∂∏‡∂∫‡∑í ‡∂¥‡∑è‡∂¥‡∂±‡∑ä‡∂Ø‡∑î ‡∑É‡∑ô‡∂Ω‡∑ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.", 
            "description": "Should replace '‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù' with '‡∑Ö‡∂∏‡∂∫‡∑í' from dictionary"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüß™ Test {i}: {test_case['name']}")
        print(f"üìù Input: '{test_case['text']}'")
        print(f"üéØ Expected: '{test_case['expected']}'")
        print(f"üìã Description: {test_case['description']}")
        
        try:
            response = requests.post(translator_url, json={
                "text": test_case["text"],
                "source_language": test_case["source_language"],
                "target_language": test_case["target_language"]
            }, timeout=15)
            
            if response.status_code == 200:
                result = response.json()
                translated_text = result.get('translated_text', 'N/A')
                confidence = result.get('confidence', 'N/A')
                method = result.get('translation_method', 'N/A')
                methods_used = result.get('methods_used', [])
                note = result.get('note', '')
                bridge_lang = result.get('bridge_language', '')
                
                print(f"‚úÖ Status: {response.status_code}")
                print(f"üìÑ Result: '{translated_text}'")
                print(f"üéØ Confidence: {confidence}")
                print(f"üîß Method: {method}")
                print(f"üõ†Ô∏è  Methods Used: {methods_used}")
                if bridge_lang:
                    print(f"üåâ Bridge Language: {bridge_lang}")
                if note:
                    print(f"üìã Note: {note}")
                
                # Check if translation is close to expected
                if translated_text.strip() == test_case['expected'].strip():
                    print("‚úÖ PERFECT MATCH!")
                elif any(word in translated_text for word in ['‡∂∏‡∑ö', '‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù', '‡∑Ö‡∂∏‡∂∫‡∑í']) and test_case['target_language'] in ['vedda', 'sinhala']:
                    print("‚úÖ GOOD - Contains expected Vedda/Sinhala words!")
                elif 'children' in translated_text.lower() and test_case['target_language'] == 'english':
                    print("‚úÖ GOOD - Contains expected English words!")
                else:
                    print("‚ö†Ô∏è  PARTIAL - Translation may need improvement")
                    
            else:
                print(f"‚ùå HTTP Error: {response.status_code}")
                print(f"Response: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Connection Error: {e}")
        
        print("-" * 50)
    
    print("\n" + "=" * 60)
    print("SENTENCE TRANSLATION ANALYSIS")
    print("=" * 60)
    print("Key Points:")
    print("‚Ä¢ 'these' should translate to '‡∂∏‡∑ö' (dictionary)")
    print("‚Ä¢ 'children' should translate to '‡∂ö‡∑ê‡∂ö‡∑î‡∂Ω‡∑ù' (Vedda) or '‡∑Ö‡∂∏‡∂∫‡∑í' (Sinhala)")
    print("‚Ä¢ Unknown words should use Sinhala bridge or Google Translate")
    print("‚Ä¢ Sentence structure should be preserved where possible")

if __name__ == "__main__":
    test_sentence_translation()